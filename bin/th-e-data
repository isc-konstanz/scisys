#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    th-e-data
    ~~~~~~~~~

    To learn how to configure the processing of timeseries, see "th-e-data --help"

"""
from __future__ import annotations

import os
import pytz as tz
import datetime as dt
import inspect

from argparse import ArgumentParser, RawTextHelpFormatter
from th_e_core.tools import to_date, ceil_date, resample_data
from th_e_core import Settings, System


def main(**kwargs) -> None:
    action = kwargs.pop('action')

    systems = System.read(settings)
    if action == 'build':
        systems.build(**kwargs)
    elif action == 'process':
        for system in systems:
            process(system, **kwargs)


def process(system: System,
            data_dir: str = 'data',
            start: str | dt.datetime = dt.datetime(1970, 1, 1, tzinfo=tz.UTC),
            end: str | dt.datetime = None, **kwargs) -> None:
    from th_e_core.io.csv import CsvDatabase
    from th_e_data.process import process

    start = to_date(start, timezone=system.location.timezone)
    end = to_date(end, timezone=system.location.timezone)
    if end is not None:
        end = ceil_date(end, timezone=system.location.timezone)

    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
    data_file = os.path.join(data_dir, system.id)
    data = system.database.read(start, end)

    try:
        import sqlite3 as sqlite
        data.to_sql(system.name, sqlite.connect(data_file + '_raw.sqlite'), if_exists='replace')

    except Exception as e:
        logger.warning("unable to write data as SQLite file: " + str(e))

    database = CsvDatabase(timezone=system.location.timezone)
    database.write(data, file=data_file + '_raw.csv')

    resolution = int(kwargs.pop('resolution', '1'))
    processed = process(data, resolution, **kwargs)
    database.write(processed, file=data_file + '_{}m.csv'.format(resolution))
    for resolution in [15, 60]:
        resampled = resample_data(processed, resolution*60)
        database.write(resampled, file=data_file + '_{}m.csv'.format(resolution))


def _get_parser() -> ArgumentParser:
    from th_e_core import __version__

    parser = ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s {version}'.format(version=__version__))

    subparsers = parser.add_subparsers(dest='action')
    subparsers.required = True
    subparsers.add_parser('build', help='Build data for the configured set of systems')
    subparsers.add_parser('process', help='Processes data for the configured set of systems')

    return parser


if __name__ == "__main__":
    run_dir = os.path.dirname(os.path.abspath(inspect.getsourcefile(main)))
    if os.path.basename(run_dir) == 'bin':
        run_dir = os.path.dirname(run_dir)

    os.chdir(run_dir)
    os.environ['NUMEXPR_MAX_THREADS'] = str(os.cpu_count())

    settings = Settings('th-e-data', parser=_get_parser())

    import logging
    logger = logging.getLogger('th-e-data')
    main(**settings.general)
